// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // model means a table basically
  id        String   @id @default(cuid())
  // cuid stands for collisionresistant unqiue id
  email     String   @unique
  username  String   @unique
  ClerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  // to show user since 2025
  updatedAt DateTime @updatedAt

  //Relations: One to many
  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users who this user follows

  notifications       Notification[] @relation("userNotifications")
  notificationCreated Notification[] @relation("notificationCreator")
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  content       String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // Relations:
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  // delete cascade means when the user account has been deleted, then we should delete all post automatically
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // realtions
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // basically allowing the filters, where now we can filter the comment by authorId and postId using the composite index
  Notification Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  //realtions:
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // we make the unique so that the same user cannot like one post twice
  @@index([userId, postId]) // filtering and faster querying
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  //realtions:
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // composite key that prevent duplicate follows
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String // who recieves the notification
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String? // optional because a notification will be sent even for follow which wont have a postid
  commentId String? // notification can be of type like and follow
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  // we can have three types of notification:
  LIKE
  COMMENT
  FOLLOW
}
